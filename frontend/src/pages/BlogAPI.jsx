// Import c√°c th∆∞ vi·ªán React v√† dependencies c·∫ßn thi·∫øt
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { toast } from 'react-toastify';
import Header from '../components/Header';
import SecondaryNavigation from '../components/SecondaryNavigation';
import postApi from '../api/postApi';

/**
 * Component trang Blog v·ªõi API th·ª±c t·∫ø
 * Qu·∫£n l√Ω vi·ªác hi·ªÉn th·ªã, t·∫°o, s·ª≠a, x√≥a c√°c b√†i vi·∫øt blog t·ª´ server
 * T√≠ch h·ª£p ƒë·∫ßy ƒë·ªß v·ªõi backend API v√† authentication
 * @returns {JSX.Element} Component trang blog v·ªõi ƒë·∫ßy ƒë·ªß ch·ª©c nƒÉng CRUD
 */
const BlogAPI = () => {
    const navigate = useNavigate();

    // State qu·∫£n l√Ω danh s√°ch b√†i vi·∫øt t·ª´ API
    const [posts, setPosts] = useState([]);

    // State qu·∫£n l√Ω danh m·ª•c b√†i vi·∫øt
    const [categories, setCategories] = useState([]);

    // State danh m·ª•c ƒëang ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ l·ªçc
    const [activeCategory, setActiveCategory] = useState('all');

    // State t·ª´ kh√≥a t√¨m ki·∫øm
    const [searchTerm, setSearchTerm] = useState('');

    // State tr·∫°ng th√°i loading khi t·∫£i d·ªØ li·ªáu
    const [isLoading, setIsLoading] = useState(true);

    // State tr·∫°ng th√°i ƒëang t√¨m ki·∫øm
    const [isSearching, setIsSearching] = useState(false);

    // State l∆∞u t·ª´ kh√≥a t√¨m ki·∫øm cu·ªëi c√πng ƒë·ªÉ tr√°nh duplicate search
    const [lastSearchTerm, setLastSearchTerm] = useState('');

    // State theo d√µi c√°c b√†i vi·∫øt ƒë√£ ƒë∆∞·ª£c view ƒë·ªÉ track analytics
    const [viewedPosts, setViewedPosts] = useState(new Set());

    // State tr·∫°ng th√°i ƒëƒÉng nh·∫≠p
    const [isLoggedIn, setIsLoggedIn] = useState(false);

    // State hi·ªÉn th·ªã form t·∫°o/s·ª≠a b√†i vi·∫øt
    const [showCreateForm, setShowCreateForm] = useState(false);

    // State b√†i vi·∫øt ƒëang ƒë∆∞·ª£c ch·ªânh s·ª≠a
    const [editingPost, setEditingPost] = useState(null);

    // State d·ªØ li·ªáu form b√†i vi·∫øt m·ªõi
    const [newPost, setNewPost] = useState({
        title: '',
        content: '',
        category: '',
        tags: []
    });

    /**
     * Effect ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng nh·∫≠p v√† load categories khi component mount
     */
    useEffect(() => {
        // Ki·ªÉm tra c·∫£ flag ƒëƒÉng nh·∫≠p v√† token t·ªìn t·∫°i
        const userLoggedIn = localStorage.getItem('userLoggedIn') === 'true';
        const token = localStorage.getItem('token');
        const actuallyLoggedIn = userLoggedIn && token;

        setIsLoggedIn(actuallyLoggedIn);

        // Load danh s√°ch categories t·ª´ API
        loadCategories();
    }, []);

    /**
     * Effect ri√™ng cho vi·ªác thay ƒë·ªïi category - load posts ngay l·∫≠p t·ª©c
     */
    useEffect(() => {
        loadPosts();
    }, [activeCategory]);

    /**
     * Effect x·ª≠ l√Ω auto-search khi x√≥a t·ª´ kh√≥a t√¨m ki·∫øm
     */
    useEffect(() => {
        if (searchTerm === '') {
            // N·∫øu t·ª´ kh√≥a b·ªã x√≥a, t√¨m ki·∫øm ngay ƒë·ªÉ hi·ªÉn th·ªã t·∫•t c·∫£ b√†i vi·∫øt
            setLastSearchTerm('');
            loadPosts();
        } else {
            // Reset lastSearchTerm khi ng∆∞·ªùi d√πng nh·∫≠p n·ªôi dung m·ªõi
            if (searchTerm.trim() !== lastSearchTerm) {
                setLastSearchTerm('');
            }
        }
    }, [searchTerm]);

    /**
     * Effect theo d√µi view b√†i vi·∫øt ƒë∆°n gi·∫£n khi posts ƒë∆∞·ª£c load
     */
    useEffect(() => {
        if (posts.length > 0) {
            // Track views cho t·∫•t c·∫£ b√†i vi·∫øt sau delay (m√¥ ph·ªèng ng∆∞·ªùi d√πng ƒëang xem)
            const timer = setTimeout(() => {
                posts.forEach(post => {
                    if (!viewedPosts.has(post.postID)) {
                        console.log('üîç Auto-tracking view for post:', post.postID);
                        handlePostView(post.postID);
                    }
                });
            }, 2000); // 2 gi√¢y sau khi posts load

            return () => clearTimeout(timer);
        }
    }, [posts]);

    /**
     * H√†m load danh s√°ch b√†i vi·∫øt t·ª´ API v·ªõi filters
     * @async
     */
    const loadPosts = async () => {
        try {
            setIsLoading(true);

            // Chu·∫©n b·ªã filters cho API
            const filters = {
                category: activeCategory === 'all' ? null : activeCategory,
                search: searchTerm || null,
                page: 1,
                pageSize: 10
            };

            console.log('üîÑ Loading posts with filters:', filters);
            const data = await postApi.getPosts('Blog', filters);
            console.log('üì® API response:', data);

            // Backend tr·∫£ v·ªÅ array tr·ª±c ti·∫øp, kh√¥ng wrap trong posts property
            if (data && Array.isArray(data)) {
                console.log('‚úÖ Found posts array:', data.length);
                setPosts(data);
            } else if (data && data.posts && Array.isArray(data.posts)) {
                console.log('‚úÖ Found posts in wrapper:', data.posts.length);
                setPosts(data.posts);
            } else {
                console.log('‚ö†Ô∏è No posts found, using empty array');
                setPosts([]);
            }
        } catch (error) {
            console.error('‚ùå Error loading posts:', error);
            // Ch·ªâ s·ª≠ d·ª•ng fallback n·∫øu c√≥ l·ªói th·ª±c s·ª±
            setPosts([]);
        } finally {
            setIsLoading(false);
        }
    };

    /**
     * H√†m load danh s√°ch categories t·ª´ API
     * @async
     */
    const loadCategories = async () => {
        try {
            const data = await postApi.getCategories('Blog');
            setCategories(data);
        } catch (error) {
            console.error('L·ªói khi t·∫£i danh m·ª•c:', error);
            // Fallback categories n·∫øu API l·ªói
            setCategories(['Kinh nghi·ªám', 'S·ª©c kh·ªèe', 'Ph∆∞∆°ng ph√°p', 'ƒê·ªông l·ª±c', 'Chia s·∫ª']);
        }
    };

    /**
     * H√†m x·ª≠ l√Ω t·∫°o b√†i vi·∫øt m·ªõi
     * @async
     */
    const handleCreatePost = async () => {
        // Ki·ªÉm tra authentication
        const token = localStorage.getItem('token');

        if (!isLoggedIn || !token) {
            toast.error('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ t·∫°o b√†i vi·∫øt.');
            navigate('/login');
            return;
        }

        // Validate d·ªØ li·ªáu form
        if (!newPost.title || !newPost.content || !newPost.category) {
            toast.error('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc: Ti√™u ƒë·ªÅ, N·ªôi dung, Danh m·ª•c');
            return;
        }

        try {
            // Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·ªÉ g·ª≠i API
            const postData = {
                ...newPost,
                postType: 'Blog'
            };

            const createdPost = await postApi.createPost(postData);
            console.log('‚úÖ Post created:', createdPost);

            toast.success('T·∫°o b√†i vi·∫øt th√†nh c√¥ng!');
            setShowCreateForm(false);
            setNewPost({ title: '', content: '', category: '', tags: [] });

            // Force reload posts ƒë·ªÉ hi·ªÉn th·ªã b√†i vi·∫øt m·ªõi
            console.log('üîÑ Force reloading posts...');
            await loadPosts();
        } catch (error) {
            console.error('Error creating post:', error);
            toast.error('Kh√¥ng th·ªÉ t·∫°o b√†i vi·∫øt. Vui l√≤ng th·ª≠ l·∫°i.');
        }
    };

    /**
     * H√†m x·ª≠ l√Ω like/unlike b√†i vi·∫øt
     * @async
     * @param {number} postId - ID c·ªßa b√†i vi·∫øt c·∫ßn like
     */
    const handleLikePost = async (postId) => {
        if (!isLoggedIn) {
            toast.error('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ th√≠ch b√†i vi·∫øt');
            return;
        }

        try {
            await postApi.likePost(postId);
            // Reload posts ƒë·ªÉ c·∫≠p nh·∫≠t s·ªë likes
            loadPosts();
        } catch (error) {
            console.error('L·ªói khi th√≠ch b√†i vi·∫øt:', error);
            toast.error('Kh√¥ng th·ªÉ th√≠ch b√†i vi·∫øt');
        }
    };

    /**
     * H√†m x·ª≠ l√Ω ch·ªânh s·ª≠a b√†i vi·∫øt - m·ªü form v·ªõi d·ªØ li·ªáu hi·ªán t·∫°i
     * @param {Object} post - B√†i vi·∫øt c·∫ßn ch·ªânh s·ª≠a
     */
    const handleEditPost = (post) => {
        setEditingPost(post);
        setNewPost({
            title: post.title,
            content: post.content,
            category: post.category,
            tags: post.tags || []
        });
        setShowCreateForm(true);
    };

    /**
     * H√†m x·ª≠ l√Ω c·∫≠p nh·∫≠t b√†i vi·∫øt ƒë√£ ch·ªânh s·ª≠a
     * @async
     */
    const handleUpdatePost = async () => {
        const token = localStorage.getItem('token');

        if (!isLoggedIn || !token) {
            toast.error('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠a b√†i vi·∫øt.');
            return;
        }

        // Validate d·ªØ li·ªáu form
        if (!newPost.title || !newPost.content || !newPost.category) {
            toast.error('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc');
            return;
        }

        try {
            // Chu·∫©n b·ªã d·ªØ li·ªáu update
            const updateData = {
                ...newPost,
                postType: 'Blog'
            };

            await postApi.updatePost(editingPost.postID, updateData);
            toast.success('C·∫≠p nh·∫≠t b√†i vi·∫øt th√†nh c√¥ng!');

            // Reset form state v√† reload posts
            setShowCreateForm(false);
            setEditingPost(null);
            setNewPost({ title: '', content: '', category: '', tags: [] });
            await loadPosts();
        } catch (error) {
            console.error('Error updating post:', error);
            toast.error('Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t b√†i vi·∫øt. Vui l√≤ng th·ª≠ l·∫°i.');
        }
    };

    /**
     * H√†m x·ª≠ l√Ω x√≥a b√†i vi·∫øt
     * @async
     * @param {number} postId - ID c·ªßa b√†i vi·∫øt c·∫ßn x√≥a
     */
    const handleDeletePost = async (postId) => {
        // X√°c nh·∫≠n tr∆∞·ªõc khi x√≥a
        if (!window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a b√†i vi·∫øt n√†y?')) {
            return;
        }

        const token = localStorage.getItem('token');

        if (!isLoggedIn || !token) {
            toast.error('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ x√≥a b√†i vi·∫øt.');
            return;
        }

        try {
            await postApi.deletePost(postId);
            toast.success('X√≥a b√†i vi·∫øt th√†nh c√¥ng!');
            await loadPosts();
        } catch (error) {
            console.error('Error deleting post:', error);
            toast.error('Kh√¥ng th·ªÉ x√≥a b√†i vi·∫øt. Vui l√≤ng th·ª≠ l·∫°i.');
        }
    };

    /**
     * H√†m h·ªßy ch·ªânh s·ª≠a v√† ƒë√≥ng form
     */
    const cancelEdit = () => {
        setShowCreateForm(false);
        setEditingPost(null);
        setNewPost({ title: '', content: '', category: '', tags: [] });
    };

    /**
     * Ki·ªÉm tra xem ng∆∞·ªùi d√πng hi·ªán t·∫°i c√≥ ph·∫£i ch·ªß s·ªü h·ªØu b√†i vi·∫øt kh√¥ng
     * @param {Object} post - B√†i vi·∫øt c·∫ßn ki·ªÉm tra
     * @returns {boolean} True n·∫øu ng∆∞·ªùi d√πng l√† ch·ªß s·ªü h·ªØu
     */
    const isOwner = (post) => {
        const currentUser = JSON.parse(localStorage.getItem('user') || '{}');
        return currentUser.userId === post.userID;
    };

    /**
     * H√†m x·ª≠ l√Ω t√¨m ki·∫øm th·ªß c√¥ng khi nh·∫•n n√∫t ho·∫∑c Enter
     * @async
     * @param {Event} e - Event object (optional)
     */
    const handleManualSearch = async (e) => {
        if (e) {
            e.preventDefault();
            e.stopPropagation();
        }

        const currentTerm = searchTerm.trim();
        if (!currentTerm || isSearching) return;

        // Tr√°nh t√¨m ki·∫øm tr√πng l·∫∑p
        if (currentTerm === lastSearchTerm && lastSearchTerm !== '') {
            console.log('üîÑ Same search term, skipping duplicate search');
            return;
        }

        console.log('üîç Manual search triggered with term:', currentTerm);
        setIsSearching(true);
        setLastSearchTerm(currentTerm);

        try {
            await loadPosts();
        } catch (error) {
            console.error('Search error:', error);
        } finally {
            setIsSearching(false);
        }
    };

    /**
     * H√†m track view b√†i vi·∫øt cho analytics
     * @async
     * @param {number} postId - ID b√†i vi·∫øt ƒë∆∞·ª£c view
     */
    const handlePostView = async (postId) => {
        // Ch·ªâ track view m·ªôt l·∫ßn cho m·ªói b√†i vi·∫øt
        if (viewedPosts.has(postId)) {
            console.log('üìä Post already viewed:', postId);
            return;
        }

        console.log('üëÅÔ∏è Tracking view for post:', postId);

        try {
            const response = await postApi.incrementView(postId);
            console.log('‚úÖ View tracked successfully:', response);

            // L∆∞u v√†o Set ƒë·ªÉ tr√°nh track duplicate
            setViewedPosts(prev => new Set([...prev, postId]));

            // C·∫≠p nh·∫≠t view count trong UI ngay l·∫≠p t·ª©c
            setPosts(prevPosts =>
                prevPosts.map(post =>
                    post.postID === postId
                        ? { ...post, views: (post.views || 0) + 1 }
                        : post
                )
            );
        } catch (error) {
            console.error('‚ùå Error tracking view for post:', postId, error);
        }
    };

    /**
     * H√†m format ng√†y th√°ng theo ƒë·ªãnh d·∫°ng Vi·ªát Nam
     * @param {string} dateString - Chu·ªói ng√†y c·∫ßn format
     * @returns {string} Ng√†y ƒë√£ ƒë∆∞·ª£c format
     */
    const formatDate = (dateString) => {
        const date = new Date(dateString);
        return date.toLocaleDateString('vi-VN');
    };

    /**
     * H√†m l·∫•y m√†u badge theo danh m·ª•c
     * @param {string} category - T√™n danh m·ª•c
     * @returns {string} M√£ m√†u hex
     */
    const getBadgeColor = (category) => {
        const colors = {
            'Kinh nghi·ªám': '#3498db',
            'S·ª©c kh·ªèe': '#e74c3c',
            'Ph∆∞∆°ng ph√°p': '#2ecc71',
            'ƒê·ªông l·ª±c': '#9b59b6',
            'Chia s·∫ª': '#f39c12'
        };
        return colors[category] || '#95a5a6';
    };

    // Hi·ªÉn th·ªã loading state
    if (isLoading) {
        return (
            <div style={{
                minHeight: '100vh',
                background: 'linear-gradient(135deg, #f0f7fa 0%, #d5f1e8 100%)',
                display: 'flex',
                justifyContent: 'center',
                alignItems: 'center',
                fontSize: '1.2rem',
                color: '#2C9085'
            }}>
                <div>ƒêang t·∫£i d·ªØ li·ªáu blog...</div>
            </div>
        );
    }

    return (
        <div
            lang="vi"
            className="vietnamese-text"
            style={{
                minHeight: '100vh',
                background: 'linear-gradient(135deg, #f0f7fa 0%, #d5f1e8 100%)'
            }}
        >
            {/* Header v√† Navigation Components */}
            <Header />
            <SecondaryNavigation />

            {/* Main Content Container */}
            <div style={{ maxWidth: '1200px', margin: '2rem auto', padding: '0 2rem' }}>
                {/* Page Header v·ªõi ti√™u ƒë·ªÅ v√† m√¥ t·∫£ */}
                <div style={{ textAlign: 'center', marginBottom: '3rem' }}>
                    <h1 style={{ color: '#2C9085', fontSize: '2.5rem', marginBottom: '1rem' }}>
                        üåø C·ªông ƒê·ªìng Cai Thu·ªëc L√°
                    </h1>
                    <p style={{ color: '#666', fontSize: '1.1rem' }}>
                        Chia s·∫ª kinh nghi·ªám, trao ƒë·ªïi ki·∫øn th·ª©c v√† h·ªó tr·ª£ l·∫´n nhau tr√™n h√†nh tr√¨nh cai thu·ªëc l√°
                    </p>
                </div>

                {/* Controls Bar: Category Filter, Search, Create Button */}
                <div style={{
                    display: 'flex',
                    justifyContent: 'space-between',
                    alignItems: 'center',
                    marginBottom: '2rem',
                    flexWrap: 'wrap',
                    gap: '1rem'
                }}>
                    {/* Left Controls: Category v√† Search */}
                    <div style={{ display: 'flex', gap: '1rem', flexWrap: 'wrap' }}>
                        {/* Category Selector */}
                        <select
                            value={activeCategory}
                            onChange={(e) => setActiveCategory(e.target.value)}
                            style={{
                                padding: '0.5rem 1rem',
                                borderRadius: '8px',
                                border: '1px solid #ddd',
                                fontSize: '1rem'
                            }}
                        >
                            <option value="all">T·∫•t c·∫£ danh m·ª•c</option>
                            {categories.map(category => (
                                <option key={category} value={category}>{category}</option>
                            ))}
                        </select>

                        {/* Search Controls */}
                        <div style={{ display: 'flex', gap: '0.5rem', alignItems: 'center' }}>
                            {/* Search Input v·ªõi Clear Button */}
                            <div style={{ position: 'relative', minWidth: '250px' }}>
                                <input
                                    type="text"
                                    placeholder="T√¨m ki·∫øm b√†i vi·∫øt..."
                                    value={searchTerm}
                                    onChange={(e) => setSearchTerm(e.target.value)}
                                    onKeyDown={(e) => {
                                        if (e.key === 'Enter') {
                                            e.preventDefault();
                                            handleManualSearch(e);
                                        }
                                    }}
                                    style={{
                                        padding: '0.5rem 1rem',
                                        paddingRight: searchTerm && !isSearching ? '2.5rem' : '1rem',
                                        borderRadius: '8px',
                                        border: isSearching ? '1px solid #2C9085' : '1px solid #ddd',
                                        fontSize: '1rem',
                                        width: '100%',
                                        boxSizing: 'border-box',
                                        outline: isSearching ? '2px solid rgba(44, 144, 133, 0.2)' : 'none'
                                    }}
                                />
                                {/* Clear Search Button */}
                                {searchTerm && !isSearching && (
                                    <button
                                        onClick={() => setSearchTerm('')}
                                        style={{
                                            position: 'absolute',
                                            right: '0.8rem',
                                            top: '50%',
                                            transform: 'translateY(-50%)',
                                            background: 'none',
                                            border: 'none',
                                            color: '#999',
                                            cursor: 'pointer',
                                            fontSize: '1.2rem',
                                            padding: '0'
                                        }}
                                        title="X√≥a t√¨m ki·∫øm"
                                    >
                                        ‚úï
                                    </button>
                                )}
                            </div>

                            {/* Search Button */}
                            <button
                                onClick={handleManualSearch}
                                disabled={!searchTerm.trim() || isSearching}
                                style={{
                                    padding: '0.5rem 1rem',
                                    backgroundColor: (!searchTerm.trim() || isSearching) ? '#ccc' : '#2C9085',
                                    color: 'white',
                                    border: 'none',
                                    borderRadius: '8px',
                                    cursor: (!searchTerm.trim() || isSearching) ? 'not-allowed' : 'pointer',
                                    fontSize: '0.9rem',
                                    display: 'flex',
                                    alignItems: 'center',
                                    gap: '0.3rem',
                                    minWidth: '100px',
                                    justifyContent: 'center'
                                }}
                                title={isSearching ? "ƒêang t√¨m ki·∫øm..." : "T√¨m ki·∫øm ngay"}
                            >
                                {isSearching ? '‚è≥ ƒêang t√¨m...' : 'üîç T√¨m'}
                            </button>
                        </div>
                    </div>

                    {/* Create Post Button - ch·ªâ hi·ªÉn th·ªã cho user ƒë√£ ƒëƒÉng nh·∫≠p */}
                    {isLoggedIn && (
                        <button
                            onClick={() => setShowCreateForm(true)}
                            style={{
                                padding: '0.7rem 1.5rem',
                                backgroundColor: '#2C9085',
                                color: 'white',
                                border: 'none',
                                borderRadius: '8px',
                                fontSize: '1rem',
                                cursor: 'pointer',
                                boxShadow: '0 2px 4px rgba(44, 144, 133, 0.3)'
                            }}
                        >
                            ‚úçÔ∏è T·∫°o b√†i vi·∫øt
                        </button>
                    )}
                </div>

                {/* Create/Edit Post Form - hi·ªÉn th·ªã khi showCreateForm = true */}
                {showCreateForm && (
                    <div style={{
                        backgroundColor: 'white',
                        padding: '2rem',
                        borderRadius: '12px',
                        marginBottom: '2rem',
                        boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',
                        border: '1px solid #e0e0e0'
                    }}>
                        {/* Form Header */}
                        <h3 style={{ marginBottom: '1rem', color: '#2C9085' }}>
                            {editingPost ? '‚úèÔ∏è Ch·ªânh s·ª≠a b√†i vi·∫øt' : '‚ú® T·∫°o b√†i vi·∫øt m·ªõi'}
                        </h3>

                        {/* Title Input */}
                        <input
                            type="text"
                            placeholder="Ti√™u ƒë·ªÅ b√†i vi·∫øt"
                            value={newPost.title}
                            onChange={(e) => setNewPost({ ...newPost, title: e.target.value })}
                            style={{
                                width: '100%',
                                padding: '0.7rem',
                                marginBottom: '1rem',
                                border: '1px solid #ddd',
                                borderRadius: '8px',
                                fontSize: '1rem',
                                boxSizing: 'border-box'
                            }}
                        />

                        {/* Category Selector */}
                        <select
                            value={newPost.category}
                            onChange={(e) => setNewPost({ ...newPost, category: e.target.value })}
                            style={{
                                width: '100%',
                                padding: '0.7rem',
                                marginBottom: '1rem',
                                border: '1px solid #ddd',
                                borderRadius: '8px',
                                fontSize: '1rem'
                            }}
                        >
                            <option value="">Ch·ªçn danh m·ª•c</option>
                            <option value="Kinh nghi·ªám">üéØ Kinh nghi·ªám</option>
                            <option value="S·ª©c kh·ªèe">‚ù§Ô∏è S·ª©c kh·ªèe</option>
                            <option value="Ph∆∞∆°ng ph√°p">üõ†Ô∏è Ph∆∞∆°ng ph√°p</option>
                            <option value="ƒê·ªông l·ª±c">üí™ ƒê·ªông l·ª±c</option>
                            <option value="Chia s·∫ª">üí¨ Chia s·∫ª</option>
                        </select>

                        {/* Content Textarea */}
                        <textarea
                            placeholder="N·ªôi dung b√†i vi·∫øt"
                            value={newPost.content}
                            onChange={(e) => setNewPost({ ...newPost, content: e.target.value })}
                            rows={6}
                            style={{
                                width: '100%',
                                padding: '0.7rem',
                                marginBottom: '1rem',
                                border: '1px solid #ddd',
                                borderRadius: '8px',
                                fontSize: '1rem',
                                resize: 'vertical',
                                boxSizing: 'border-box'
                            }}
                        />

                        {/* Tags Input */}
                        <input
                            type="text"
                            placeholder="Tags (ph√¢n c√°ch b·∫±ng d·∫•u ph·∫©y, v√≠ d·ª•: cai thu·ªëc, kinh nghi·ªám, s·ª©c kh·ªèe)"
                            value={newPost.tags.join(', ')}
                            onChange={(e) => {
                                const tagsString = e.target.value;
                                const tagsArray = tagsString.split(',').map(tag => tag.trim()).filter(tag => tag.length > 0);
                                setNewPost({ ...newPost, tags: tagsArray });
                            }}
                            style={{
                                width: '100%',
                                padding: '0.7rem',
                                marginBottom: '1rem',
                                border: '1px solid #ddd',
                                borderRadius: '8px',
                                fontSize: '1rem',
                                boxSizing: 'border-box'
                            }}
                        />

                        {/* Form Action Buttons */}
                        <div style={{ display: 'flex', gap: '1rem' }}>
                            {/* Submit Button - kh√°c nhau gi·ªØa create v√† update */}
                            <button
                                onClick={editingPost ? handleUpdatePost : handleCreatePost}
                                style={{
                                    padding: '0.7rem 1.5rem',
                                    backgroundColor: '#2C9085',
                                    color: 'white',
                                    border: 'none',
                                    borderRadius: '8px',
                                    cursor: 'pointer'
                                }}
                            >
                                {editingPost ? 'üíæ C·∫≠p nh·∫≠t' : 'üìù ƒêƒÉng b√†i'}
                            </button>

                            {/* Cancel Button */}
                            <button
                                onClick={cancelEdit}
                                style={{
                                    padding: '0.7rem 1.5rem',
                                    backgroundColor: '#ddd',
                                    color: '#333',
                                    border: 'none',
                                    borderRadius: '8px',
                                    cursor: 'pointer'
                                }}
                            >
                                ‚ùå H·ªßy
                            </button>
                        </div>
                    </div>
                )}

                {/* Posts List */}
                <div style={{ display: 'flex', flexDirection: 'column', gap: '1.5rem' }}>
                    {posts.map(post => (
                        <div
                            key={post.postID}
                            data-post-id={post.postID}
                            style={{
                                backgroundColor: 'white',
                                borderRadius: '12px',
                                padding: '2rem',
                                boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',
                                border: '1px solid #f0f0f0'
                            }}
                        >
                            {/* Post Header v·ªõi th√¥ng tin t√°c gi·∫£ v√† category */}
                            <div style={{
                                display: 'flex',
                                justifyContent: 'space-between',
                                alignItems: 'flex-start',
                                marginBottom: '1rem'
                            }}>
                                {/* Author Info */}
                                <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>
                                    <div style={{
                                        width: '40px',
                                        height: '40px',
                                        borderRadius: '50%',
                                        backgroundColor: '#f0f0f0',
                                        display: 'flex',
                                        alignItems: 'center',
                                        justifyContent: 'center',
                                        fontSize: '1.2rem'
                                    }}>
                                        üë§
                                    </div>
                                    <div>
                                        <div style={{ fontWeight: 'bold', color: '#2C9085' }}>
                                            {post.userName || '·∫®n danh'}
                                        </div>
                                        <div style={{ fontSize: '0.9rem', color: '#666' }}>
                                            {formatDate(post.createdAt)}
                                        </div>
                                    </div>
                                </div>

                                {/* Category Badge */}
                                {post.category && (
                                    <span style={{
                                        backgroundColor: getBadgeColor(post.category),
                                        color: 'white',
                                        padding: '0.3rem 0.8rem',
                                        borderRadius: '15px',
                                        fontSize: '0.8rem'
                                    }}>
                                        {post.category}
                                    </span>
                                )}
                            </div>

                            {/* Post Title */}
                            <h3 style={{ color: '#333', marginBottom: '1rem', fontSize: '1.3rem' }}>
                                {post.title}
                            </h3>

                            {/* Post Content - truncate n·∫øu qu√° d√†i */}
                            <p style={{
                                color: '#555',
                                lineHeight: '1.6',
                                marginBottom: '1.5rem'
                            }}>
                                {post.content && post.content.length > 200
                                    ? `${post.content.substring(0, 200)}...`
                                    : post.content
                                }
                            </p>

                            {/* Post Footer v·ªõi action buttons */}
                            <div style={{
                                display: 'flex',
                                justifyContent: 'space-between',
                                alignItems: 'center',
                                paddingTop: '1rem',
                                borderTop: '1px solid #f0f0f0'
                            }}>
                                {/* Left Actions: Like, Comment, View */}
                                <div style={{ display: 'flex', gap: '2rem' }}>
                                    {/* Like Button */}
                                    <button
                                        onClick={() => handleLikePost(post.postID)}
                                        style={{
                                            background: 'none',
                                            border: 'none',
                                            cursor: 'pointer',
                                            display: 'flex',
                                            alignItems: 'center',
                                            gap: '0.5rem',
                                            color: post.isLiked ? '#e74c3c' : '#666',
                                            fontSize: '0.9rem'
                                        }}
                                    >
                                        {post.isLiked ? '‚ù§Ô∏è' : 'ü§ç'} {post.likes || 0}
                                    </button>

                                    {/* Comments Count */}
                                    <span style={{
                                        display: 'flex',
                                        alignItems: 'center',
                                        gap: '0.5rem',
                                        color: '#666',
                                        fontSize: '0.9rem'
                                    }}>
                                        üí¨ {post.comments?.length || 0}
                                    </span>

                                    {/* View Button - clickable ƒë·ªÉ test view tracking */}
                                    <button
                                        onClick={() => handlePostView(post.postID)}
                                        style={{
                                            background: 'none',
                                            border: 'none',
                                            cursor: 'pointer',
                                            display: 'flex',
                                            alignItems: 'center',
                                            gap: '0.5rem',
                                            color: '#666',
                                            fontSize: '0.9rem',
                                            padding: '0'
                                        }}
                                        title="Click ƒë·ªÉ test view tracking"
                                    >
                                        üëÅÔ∏è {post.views || 0}
                                    </button>
                                </div>

                                {/* Right Actions: Edit & Delete cho ch·ªß s·ªü h·ªØu */}
                                {isLoggedIn && isOwner(post) && (
                                    <div style={{ display: 'flex', gap: '0.5rem' }}>
                                        {/* Edit Button */}
                                        <button
                                            onClick={() => handleEditPost(post)}
                                            style={{
                                                background: 'none',
                                                border: '1px solid #3498db',
                                                color: '#3498db',
                                                padding: '0.4rem 0.8rem',
                                                borderRadius: '6px',
                                                cursor: 'pointer',
                                                fontSize: '0.85rem',
                                                display: 'flex',
                                                alignItems: 'center',
                                                gap: '0.3rem',
                                                transition: 'all 0.2s ease'
                                            }}
                                            title="Ch·ªânh s·ª≠a b√†i vi·∫øt"
                                            onMouseOver={(e) => {
                                                e.target.style.backgroundColor = '#3498db';
                                                e.target.style.color = 'white';
                                            }}
                                            onMouseOut={(e) => {
                                                e.target.style.backgroundColor = 'transparent';
                                                e.target.style.color = '#3498db';
                                            }}
                                        >
                                            ‚úèÔ∏è S·ª≠a
                                        </button>

                                        {/* Delete Button */}
                                        <button
                                            onClick={() => handleDeletePost(post.postID)}
                                            style={{
                                                background: 'none',
                                                border: '1px solid #e74c3c',
                                                color: '#e74c3c',
                                                padding: '0.4rem 0.8rem',
                                                borderRadius: '6px',
                                                cursor: 'pointer',
                                                fontSize: '0.85rem',
                                                display: 'flex',
                                                alignItems: 'center',
                                                gap: '0.3rem',
                                                transition: 'all 0.2s ease'
                                            }}
                                            title="X√≥a b√†i vi·∫øt"
                                            onMouseOver={(e) => {
                                                e.target.style.backgroundColor = '#e74c3c';
                                                e.target.style.color = 'white';
                                            }}
                                            onMouseOut={(e) => {
                                                e.target.style.backgroundColor = 'transparent';
                                                e.target.style.color = '#e74c3c';
                                            }}
                                        >
                                            üóëÔ∏è X√≥a
                                        </button>
                                    </div>
                                )}
                            </div>
                        </div>
                    ))}
                </div>

                {/* Empty State - hi·ªÉn th·ªã khi kh√¥ng c√≥ b√†i vi·∫øt */}
                {posts.length === 0 && !isLoading && (
                    <div style={{
                        textAlign: 'center',
                        padding: '3rem',
                        backgroundColor: 'white',
                        borderRadius: '12px',
                        color: '#666'
                    }}>
                        <h3>üå± Ch∆∞a c√≥ b√†i vi·∫øt n√†o</h3>
                        <p>H√£y l√† ng∆∞·ªùi ƒë·∫ßu ti√™n chia s·∫ª kinh nghi·ªám cai thu·ªëc l√° c·ªßa b·∫°n!</p>
                        {isLoggedIn && (
                            <button
                                onClick={() => setShowCreateForm(true)}
                                style={{
                                    marginTop: '1rem',
                                    padding: '0.7rem 1.5rem',
                                    backgroundColor: '#2C9085',
                                    color: 'white',
                                    border: 'none',
                                    borderRadius: '8px',
                                    cursor: 'pointer'
                                }}
                            >
                                ‚úçÔ∏è T·∫°o b√†i vi·∫øt ƒë·∫ßu ti√™n
                            </button>
                        )}
                    </div>
                )}
            </div>
        </div>
    );
};

export default BlogAPI; 