import React, { useState, useRef, useEffect } from 'react';
import { Link } from 'react-router-dom';
import Header from '../components/Header';
import SecondaryNavigation from '../components/SecondaryNavigation';

const SupportChat = () => {
    const [messages, setMessages] = useState([
        {
            id: 1,
            sender: 'staff',
            name: 'Nguy·ªÖn VƒÉn A',
            message: 'Xin ch√†o! T√¥i l√† nh√¢n vi√™n h·ªó tr·ª£. B·∫°n c·∫ßn gi√∫p ƒë·ª° g√¨ kh√¥ng?',
            timestamp: '10:30 AM'
        },
        {
            id: 2,
            sender: 'user',
            message: 'T√¥i ƒëang g·∫∑p kh√≥ khƒÉn v·ªõi c∆°n th√®m thu·ªëc l√°.',
            timestamp: '10:32 AM'
        },
        {
            id: 3,
            sender: 'doctor',
            name: 'BS. Tr·∫ßn VƒÉn B',
            message: 'Xin ch√†o, t√¥i l√† b√°c sƒ© h·ªó tr·ª£. Khi b·∫°n g·∫∑p c∆°n th√®m thu·ªëc, h√£y th·ª≠ h√≠t th·ªü s√¢u v√† u·ªëng m·ªôt ly n∆∞·ªõc. B·∫°n c≈©ng c√≥ th·ªÉ ƒëi b·ªô nh·∫π nh√†ng trong v√†i ph√∫t.',
            timestamp: '10:35 AM'
        }
    ]);
    const [newMessage, setNewMessage] = useState('');
    const chatContainerRef = useRef(null);
    
    // L·∫•y t√™n ng∆∞·ªùi d√πng t·ª´ localStorage
    const userName = localStorage.getItem('userName') || '';

    useEffect(() => {
        if (chatContainerRef.current) {
            chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;
        }
    }, [messages]);

    const handleSendMessage = (e) => {
        e.preventDefault();
        if (newMessage.trim() === '') return;

        const userMessage = {
            id: messages.length + 1,
            sender: 'user',
            message: newMessage,
            timestamp: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })
        };

        setMessages([...messages, userMessage]);
        setNewMessage('');

        // Simulate staff or doctor response after a short delay
        setTimeout(() => {
            const respondents = ['staff', 'doctor'];
            const respondentType = respondents[Math.floor(Math.random() * respondents.length)];

            let responseMessage = {
                id: messages.length + 2,
                sender: respondentType,
                timestamp: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })
            };

            if (respondentType === 'staff') {
                responseMessage.name = 'Nguy·ªÖn VƒÉn A';
                responseMessage.message = 'C·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª. Ch√∫ng t√¥i s·∫Ω h·ªó tr·ª£ b·∫°n trong h√†nh tr√¨nh cai thu·ªëc l√°. B·∫°n c√≥ th·ªÉ th·ª≠ m·ªôt s·ªë b√†i t·∫≠p th∆∞ gi√£n ho·∫∑c ƒë·ªçc m·ªôt cu·ªën s√°ch ƒë·ªÉ chuy·ªÉn h∆∞·ªõng s·ª± ch√∫ √Ω.';
            } else {
                responseMessage.name = 'BS. Tr·∫ßn VƒÉn B';
                responseMessage.message = 'T√¥i hi·ªÉu nh·ªØng kh√≥ khƒÉn b·∫°n ƒëang tr·∫£i qua. Vi·ªác cai thu·ªëc l√° kh√¥ng h·ªÅ ƒë∆°n gi·∫£n. H√£y nh·ªõ r·∫±ng m·ªói ng√†y kh√¥ng h√∫t thu·ªëc l√† m·ªôt chi·∫øn th·∫Øng. T√¥i ƒë·ªÅ xu·∫•t b·∫°n th·ª≠ ph∆∞∆°ng ph√°p 4D: Tr√¨ ho√£n, H√≠t th·ªü s√¢u, U·ªëng n∆∞·ªõc v√† Chuy·ªÉn h∆∞·ªõng s·ª± ch√∫ √Ω.';
            }

            setMessages(prevMessages => [...prevMessages, responseMessage]);
        }, 1000);
    };

    return (
        <div className="support-chat-page">
            {/* Header Component */}
            <Header userName={userName} />
            
            {/* Secondary Navigation */}
            <SecondaryNavigation />
            
            <div className="support-content">
                <div className="content-header">
                    <h1>Tr·ª£ Gi√∫p & H·ªó tr·ª£</h1>
                    <Link to="/homepage-member" className="back-button">Quay L·∫°i Trang Ch·ªß</Link>
                </div>

                <div className="chat-container">
                    <h2>Chat H·ªó Tr·ª£</h2>

                    <div className="messages-container" ref={chatContainerRef}>
                        {messages.map((msg) => (
                            <div
                                key={msg.id}
                                className={`message-wrapper ${msg.sender === 'user' ? 'user-message' : 'support-message'}`}
                            >
                                {msg.sender !== 'user' && (
                                    <div className="sender-info">
                                        <div className={`sender-avatar ${msg.sender}`}>
                                            {msg.sender === 'staff' ? 'üë®‚Äçüíº' : 'üë®‚Äç‚öïÔ∏è'}
                                        </div>
                                        <span className={`sender-name ${msg.sender}`}>
                                            {msg.name}
                                        </span>
                                    </div>
                                )}

                                <div className={`message ${msg.sender}`}>
                                    <p>{msg.message}</p>
                                    <span className="timestamp">{msg.timestamp}</span>
                                </div>
                            </div>
                        ))}
                    </div>

                    <form onSubmit={handleSendMessage} className="message-form">
                        <input
                            type="text"
                            value={newMessage}
                            onChange={(e) => setNewMessage(e.target.value)}
                            placeholder="Nh·∫≠p tin nh·∫Øn c·ªßa b·∫°n..."
                            className="message-input"
                        />
                        <button type="submit" className="send-button">
                            <span>G·ª≠i</span>
                            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M22 2L11 13" stroke="white" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
                                <path d="M22 2L15 22L11 13L2 9L22 2Z" stroke="white" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
                            </svg>
                        </button>
                    </form>
                </div>
            </div>

            <style jsx>{`
                .support-chat-page {
                    min-height: 100vh;
                    width: 100%;
                    background: linear-gradient(135deg, #f0f7fa 0%, #d5f1e8 100%);
                    font-family: '"Segoe UI", Roboto, Oxygen, Ubuntu, sans-serif';
                }
                
                .support-content {
                    max-width: 1200px;
                    margin: 0 auto;
                    padding: 2rem;
                    box-sizing: border-box;
                }
                
                .content-header {
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    margin-bottom: 2rem;
                }
                
                .content-header h1 {
                    font-size: 2.2rem;
                    font-weight: 700;
                    color: #2c3e50;
                    margin: 0;
                }
                
                .back-button {
                    padding: 0.5rem 1.5rem;
                    background-color: #35a79c;
                    color: white;
                    text-decoration: none;
                    border-radius: 50px;
                    font-weight: 500;
                    box-shadow: 0 4px 6px rgba(53, 167, 156, 0.2);
                }
                
                .chat-container {
                    background-color: white;
                    border-radius: 15px;
                    padding: 1.5rem;
                    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
                    display: flex;
                    flex-direction: column;
                    height: calc(100vh - 200px);
                    overflow: hidden;
                }
                
                .chat-container h2 {
                    font-weight: 600;
                    margin-bottom: 1rem;
                    color: #35a79c;
                }
                
                .messages-container {
                    flex: 1;
                    overflow: auto;
                    padding: 1rem;
                    background-color: #f9f9f9;
                    border-radius: 10px;
                    margin-bottom: 1rem;
                }
                
                .message-wrapper {
                    display: flex;
                    flex-direction: column;
                    align-items: flex-start;
                    margin-bottom: 1rem;
                }
                
                .user-message {
                    align-items: flex-end;
                }
                
                .sender-info {
                    display: flex;
                    align-items: center;
                    margin-bottom: 0.3rem;
                }
                
                .sender-avatar {
                    width: 32px;
                    height: 32px;
                    border-radius: 50%;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    margin-right: 0.5rem;
                    font-size: 1rem;
                }
                
                .sender-avatar.staff {
                    background-color: #44b89d20;
                }
                
                .sender-avatar.doctor {
                    background-color: #0057b820;
                }
                
                .sender-name {
                    font-weight: 600;
                }
                
                .sender-name.staff {
                    color: #44b89d;
                }
                
                .sender-name.doctor {
                    color: #0057b8;
                }
                
                .message {
                    padding: 0.8rem 1.2rem;
                    border-radius: 15px;
                    max-width: 80%;
                    box-shadow: 0 1px 5px rgba(0, 0, 0, 0.05);
                }
                
                .message.user {
                    background-color: #35a79c;
                    color: white;
                    border-bottom-right-radius: 5px;
                }
                
                .message.staff {
                    background-color: #f0f7fa;
                    color: #2c3e50;
                    border-bottom-left-radius: 5px;
                }
                
                .message.doctor {
                    background-color: #e6f7ff;
                    color: #2c3e50;
                    border-bottom-left-radius: 5px;
                }
                
                .message p {
                    margin: 0;
                    line-height: 1.5;
                }
                
                .timestamp {
                    font-size: 0.8rem;
                    opacity: 0.8;
                    margin-top: 0.3rem;
                    display: block;
                    text-align: right;
                }
                
                .message-form {
                    display: flex;
                    gap: 1rem;
                }
                
                .message-input {
                    flex: 1;
                    padding: 0.8rem 1.2rem;
                    border: 1px solid #e0e0e0;
                    border-radius: 10px;
                    font-size: 1rem;
                    outline: none;
                }
                
                .send-button {
                    background-color: #35a79c;
                    color: white;
                    border: none;
                    border-radius: 10px;
                    padding: 0 1.5rem;
                    font-weight: 600;
                    cursor: pointer;
                    display: flex;
                    align-items: center;
                    gap: 0.5rem;
                }
            `}</style>
        </div>
    );
};

export default SupportChat; 